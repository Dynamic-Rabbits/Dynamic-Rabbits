/*
 * vb_taint_policy.h
 *
 *  Created on: 31 Jul 2019
 *      Author: john
 */

#ifndef POLICY_VB_TAINT_POLICY_H_
#define POLICY_VB_TAINT_POLICY_H_

#include "taint_bunny.h"

typedef struct{

    /** The base address returned by the allocator **/
    uintptr_t root_addr;
    /** The end address **/
    uintptr_t end_addr;

    /** The pc at creation **/
    uintptr_t creation_pc;
    uintptr_t ret_creation_pc;

    /** The pc at dangling **/
    uintptr_t dangling_pc;
    uintptr_t ret_dangle_pc;

    /** Indicates whether ptr is live */
    int is_live;
    /** Size of heap object **/
    size_t object_size;

    /** Ref counter **/
    unsigned int count;

    /** Alloc counter. An internal counter to help reduce traces. **/
    int alloc_counter;

    /**
     * TODO: Is it worth storing info related to:
     *  1) The pc at first write
     *  2) The pc at last write
     *
     *  We could even have a bitmask!
     *
     * This is useful if we want to implement heuristics on
     * conditions for bugs and garner better understanding for
     * root cause analysis.
     *
     * Sooooo many ideas, soooooo little time.
     *
     *  Keep calm, it's just a prototype.
     */
} vb_heap_ptr_t;


void vb_tl_new_ref(void *taint_label);

void vb_tl_delete_ref(void *taint_label);


#endif /* POLICY_VB_TAINT_POLICY_H_ */
